%% File : LM_TOS_MODULE.tlc
%% Created : Wed Jan 20 09:21:23 2021
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "LM_TOS_MODULE.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  LM_TOS_MODULE "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "LM_TOS_MODULE_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"
    #ifdef __cplusplus
    extern "C" {
    #endif
    extern void LM_TOS_MODULE_Start_wrapper_accel(void);
    extern void LM_TOS_MODULE_Outputs_wrapper_accel(const real_T *timeStamp_In,
			const uint32_T *frameNum_In,
			const void *objects_In, void *__objects_InBUS,
			const void *vehState_In, void *__vehState_InBUS,
			const void *fus_Lane_In, void *__fus_Lane_InBUS,
			const void *fus_roadEdge_In, void *__fus_roadEdge_InBUS,
			const void *acc_to_In, void *__acc_to_InBUS,
			uint8_T *egoLaneId_output,
			void *lanes_bas_info_st_output, void *__lanes_bas_info_st_outputBUS,
			void *tar_obj_st_output, void *__tar_obj_st_outputBUS,
			void *segments_st_output, void *__segments_st_outputBUS,
			void *hwa_tar_obj_st_output, void *__hwa_tar_obj_st_outputBUS,
			uint8_T *hmi_obj_count_output,
			void *hmi_info_st_output, void *__hmi_info_st_outputBUS,
			void *nls_info_st_output, void *__nls_info_st_outputBUS,
			uint16_T *rolling_count_output,
			uint8_T *te_Flag_output);
    #ifdef __cplusplus
    }
    #endif
    #endif
    %closefile hFile

    %assign cFileName = "LM_TOS_MODULE_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "LM_TOS_MODULE_bus.h"

    void LM_TOS_MODULE_Start_wrapper_accel(void){
    LM_TOS_MODULE_Start_wrapper();
    }
    void LM_TOS_MODULE_Outputs_wrapper_accel(const real_T *timeStamp_In,
			const uint32_T *frameNum_In,
			const void *objects_In, void *__objects_InBUS,
			const void *vehState_In, void *__vehState_InBUS,
			const void *fus_Lane_In, void *__fus_Lane_InBUS,
			const void *fus_roadEdge_In, void *__fus_roadEdge_InBUS,
			const void *acc_to_In, void *__acc_to_InBUS,
			uint8_T *egoLaneId_output,
			void *lanes_bas_info_st_output, void *__lanes_bas_info_st_outputBUS,
			void *tar_obj_st_output, void *__tar_obj_st_outputBUS,
			void *segments_st_output, void *__segments_st_outputBUS,
			void *hwa_tar_obj_st_output, void *__hwa_tar_obj_st_outputBUS,
			uint8_T *hmi_obj_count_output,
			void *hmi_info_st_output, void *__hmi_info_st_outputBUS,
			void *nls_info_st_output, void *__nls_info_st_outputBUS,
			uint16_T *rolling_count_output,
			uint8_T *te_Flag_output){

    %assign dTypeId = LibBlockInputSignalDataTypeId(2)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(FUS_OUTOBJ_LIST_ST *) __objects_InBUS)", "(char *) objects_In", 2)>

    %assign dTypeId = LibBlockInputSignalDataTypeId(3)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(VSI_VEHSTATE_ST *) __vehState_InBUS)", "(char *) vehState_In", 3)>

    %assign dTypeId = LibBlockInputSignalDataTypeId(4)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(FUS_LANE_OUTPUT_ST *) __fus_Lane_InBUS)", "(char *) fus_Lane_In", 4)>

    %assign dTypeId = LibBlockInputSignalDataTypeId(5)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(FUS_ROAD_EDGE_OUTPUT_ST *) __fus_roadEdge_InBUS)", "(char *) fus_roadEdge_In", 5)>

    %assign dTypeId = LibBlockInputSignalDataTypeId(6)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(ATS_PO_ST *) __acc_to_InBUS)", "(char *) acc_to_In", 6)>
    LM_TOS_MODULE_Outputs_wrapper(timeStamp_In,
			frameNum_In,
			(FUS_OUTOBJ_LIST_ST *) __objects_InBUS,
			(VSI_VEHSTATE_ST *) __vehState_InBUS,
			(FUS_LANE_OUTPUT_ST *) __fus_Lane_InBUS,
			(FUS_ROAD_EDGE_OUTPUT_ST *) __fus_roadEdge_InBUS,
			(ATS_PO_ST *) __acc_to_InBUS,
			egoLaneId_output,
			(LANES_BAS_INFO_ST_adt *) __lanes_bas_info_st_outputBUS,
			(TARGETOBJECTS_ST_adp *) __tar_obj_st_outputBUS,
			(SEGMENTS_ST_adp *) __segments_st_outputBUS,
			(HWA_TARGETOBJECT_OUTPUT_ADAPTER_ST *) __hwa_tar_obj_st_outputBUS,
			hmi_obj_count_output,
			(HMI_OUTPUT_ST_APT *) __hmi_info_st_outputBUS,
			(NARROW_LANE_SUPPORT_OUTPUT_ST *) __nls_info_st_outputBUS,
			rolling_count_output,
			te_Flag_output);

    %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) lanes_bas_info_st_output", "(*(LANES_BAS_INFO_ST_adt *) __lanes_bas_info_st_outputBUS)", 1)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(2)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) tar_obj_st_output", "(*(TARGETOBJECTS_ST_adp *) __tar_obj_st_outputBUS)", 2)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(3)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) segments_st_output", "(*(SEGMENTS_ST_adp *) __segments_st_outputBUS)", 3)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(4)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) hwa_tar_obj_st_output", "(*(HWA_TARGETOBJECT_OUTPUT_ADAPTER_ST *) __hwa_tar_obj_st_outputBUS)", 4)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(6)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) hmi_info_st_output", "(*(HMI_OUTPUT_ST_APT *) __hmi_info_st_outputBUS)", 6)>

    %assign dTypeId = LibBlockOutputSignalDataTypeId(7)
    %<SLibAssignUserStructToSLStruct(dTypeId, "(char *) nls_info_st_output", "(*(NARROW_LANE_SUPPORT_OUTPUT_ST *) __nls_info_st_outputBUS)", 7)>
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void LM_TOS_MODULE_Start_wrapper(void);

    extern void LM_TOS_MODULE_Outputs_wrapper(const real_T *timeStamp_In,
			const uint32_T *frameNum_In,
			const FUS_OUTOBJ_LIST_ST *objects_In,
			const VSI_VEHSTATE_ST *vehState_In,
			const FUS_LANE_OUTPUT_ST *fus_Lane_In,
			const FUS_ROAD_EDGE_OUTPUT_ST *fus_roadEdge_In,
			const ATS_PO_ST *acc_to_In,
			uint8_T *egoLaneId_output,
			LANES_BAS_INFO_ST_adt *lanes_bas_info_st_output,
			TARGETOBJECTS_ST_adp *tar_obj_st_output,
			SEGMENTS_ST_adp *segments_st_output,
			HWA_TARGETOBJECT_OUTPUT_ADAPTER_ST *hwa_tar_obj_st_output,
			uint8_T *hmi_obj_count_output,
			HMI_OUTPUT_ST_APT *hmi_info_st_output,
			NARROW_LANE_SUPPORT_OUTPUT_ST *nls_info_st_output,
			uint16_T *rolling_count_output,
			uint8_T *te_Flag_output);

    extern void LM_TOS_MODULE_Terminate_wrapper(void);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  LM_TOS_MODULE_Start_wrapper();
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign py9 = LibBlockOutputSignalAddr(9, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign objects_InBUS_ptr = LibBlockDWorkAddr(objects_InBUS, "", "", 0)
    %assign vehState_InBUS_ptr = LibBlockDWorkAddr(vehState_InBUS, "", "", 0)
    %assign fus_Lane_InBUS_ptr = LibBlockDWorkAddr(fus_Lane_InBUS, "", "", 0)
    %assign fus_roadEdge_InBUS_ptr = LibBlockDWorkAddr(fus_roadEdge_InBUS, "", "", 0)
    %assign acc_to_InBUS_ptr = LibBlockDWorkAddr(acc_to_InBUS, "", "", 0)
    %assign lanes_bas_info_st_outputBUS_ptr = LibBlockDWorkAddr(lanes_bas_info_st_outputBUS, "", "", 0)
    %assign tar_obj_st_outputBUS_ptr = LibBlockDWorkAddr(tar_obj_st_outputBUS, "", "", 0)
    %assign segments_st_outputBUS_ptr = LibBlockDWorkAddr(segments_st_outputBUS, "", "", 0)
    %assign hwa_tar_obj_st_outputBUS_ptr = LibBlockDWorkAddr(hwa_tar_obj_st_outputBUS, "", "", 0)
    %assign hmi_info_st_outputBUS_ptr = LibBlockDWorkAddr(hmi_info_st_outputBUS, "", "", 0)
    %assign nls_info_st_outputBUS_ptr = LibBlockDWorkAddr(nls_info_st_outputBUS, "", "", 0)
    LM_TOS_MODULE_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<objects_InBUS_ptr>, %<pu3>, %<vehState_InBUS_ptr>, %<pu4>, %<fus_Lane_InBUS_ptr>, %<pu5>, %<fus_roadEdge_InBUS_ptr>, %<pu6>, %<acc_to_InBUS_ptr>, %<py0>, %<py1>, %<lanes_bas_info_st_outputBUS_ptr>, %<py2>, %<tar_obj_st_outputBUS_ptr>, %<py3>, %<segments_st_outputBUS_ptr>, %<py4>, %<hwa_tar_obj_st_outputBUS_ptr>, %<py5>, %<py6>, %<hmi_info_st_outputBUS_ptr>, %<py7>, %<nls_info_st_outputBUS_ptr>, %<py8>, %<py9>);
  %else
    LM_TOS_MODULE_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>);
  %endif

  %%
%endfunction


%% [EOF] LM_TOS_MODULE.tlc

