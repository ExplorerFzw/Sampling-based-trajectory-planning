#ifndef _P_PARAM_API_H_
#define _P_PARAM_API_H_

/************************** Include *******************************************/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include "basic_type.h"

/************************** Macro *********************************************/
#define SM_PARAM_VERSION                  (7)

#define SM_PARAM_API_INIT(__MACRO_PARAM_KEY, __MACRO_PARAM_TYPE, __MACRO_PARAM_VALUE_FIELD, __MACRO_PARAM_VALUE)\
do\
{\
    idx = (maxSize > idx) ? (idx) : (maxSize-1);\
    pDataMem[idx].key  = __MACRO_PARAM_KEY;\
    pDataMem[idx].type = __MACRO_PARAM_TYPE;\
    pDataMem[idx].__MACRO_PARAM_VALUE_FIELD = __MACRO_PARAM_VALUE;\
    idx++;\
}\
while(0)

/************************** Struct And Enum ***********************************/
typedef struct
{
    uint32          key;
    uint32          type;

    union
    {
        uint32      u32Value;
        sint32      s32Value;
        float32     f32Value;
    };
}PARAM_Unit;


typedef enum
{
    SM_PARAM_TYPE_UINT32  = 0,
    SM_PARAM_TYPE_SINT32  = 1,
    SM_PARAM_TYPE_FLOAT32 = 2,
    SM_PARAM_TYPE_MAX,
}PARAM_Type;


typedef enum
{
    /*general*/
    SM_PARAM_KEY_FUSION_FUSIONGLOB_OBSROBTHRES = 0x5428ED01, // obstacle probability threshold for validity checking
    SM_PARAM_KEY_FUSION_FUSIONGLOB_VISCONFITHRES,            // vision object confidence threshold for validity checking


    /*confidence*/
    SM_PARAM_KEY_FUSION_CONFIDENCE_BZCOAST,          // coasting time for confidence in blind zone
    SM_PARAM_KEY_FUSION_CONFIDENCE_BZAREA,           // longitudinal distance for blind zone
    SM_PARAM_KEY_FUSION_CONFIDENCE_YRTHRES,          // yaw rate threshold for cmbb confidence

    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTXSMALLTHRES, // small delta long position threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTXMEDTHRES,   // medium delta long position threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTXBIGTHRES,   // big delta long position threshold for smooth checking

    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTYSMALLTHRES, // small delta lateral position threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTYMEDTHRES,   // medium delta lateral position threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTYBIGTHRES,   // big delta lateral position threshold for smooth checking

    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTSPEEDSMALLTHRES, // small delta speed threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTSPEEDMEDTHRES,   // medium delta speed  threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTSPEEDBIGTHRES,   // big delta speed threshold for smooth checking

    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTHEADINGSMALLTHRES, // small delta heading angle threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTHEADINGMEDTHRES,   // medium delta heading angle  threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTHEADINGBIGTHRES,   // big delta heading angle threshold for smooth checking

    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTACCSMALLTHRES, // small delta acceleration threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTACCMEDTHRES,   // medium delta acceleration threshold for smooth checking
    SM_PARAM_KEY_FUSION_CONFIDENCE_DLTACCBIGTHRES,   // big delta acceleration threshold for smooth checking

    SM_PARAM_KEY_FUSION_CONFIDENCE_VISONLYPEDFCW,    // vision only pedestrian fcw flag


    /*association*/
    SM_PARAM_KEY_FUSION_ASSOCIATION_NIGHTCOEFF, // coefficient of association score for night scenario
    SM_PARAM_KEY_FUSION_ASSOCIATION_SCORETHRES, // score threshold for association
    SM_PARAM_KEY_FUSION_ASSOCIATION_VISSYSXERR, // vision object longitudinal system error
    SM_PARAM_KEY_FUSION_ASSOCIATION_KPRESCORE,  // weight for score calculated in last cycle
    SM_PARAM_KEY_FUSION_ASSOCIATION_KOBSPROB,   // weight for radar object obstacle probability
    SM_PARAM_KEY_FUSION_ASSOCIATION_KCLASSIFICATION, // weight for classification

    //pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_XLOGTHRESPED, // longitudinal section threshold for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSXPED,       // weight for longitudinal in short range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSYPED,       // weight for lateral in short range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSSPEEDPED,   // weight for speed in short range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSTTCPED,     // weight for TTC in short range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSANGLEPED,   // weight for angle in short range for pedestrian

    SM_PARAM_KEY_FUSION_ASSOCIATION_KLXPED,     // weight for longitudinal in long range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLYPED,     // weight for lateral in long range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLSPEEDPED, // weight for speed in long range for pedestrian
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLTTCPED,   // weight for TTC in long range for pedestrian


    // other classificaiton (car)
    SM_PARAM_KEY_FUSION_ASSOCIATION_XSLOGTHRESCAR, // small longitudinal section threshold for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_XMLOGTHRESCAR, // medium longitudinal section threshold for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_XBLOGTHRESCAR, // big longitudinal section threshold for car

    SM_PARAM_KEY_FUSION_ASSOCIATION_KSXCAR,     // weight for longitudinal in short range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSYCAR,     // weight for lateral in short range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSSPEEDCAR, // weight for speed in short range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSTTCCAR,   // weight for TTC in short range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KSANGLECAR, // weight for angle in short range for car

    SM_PARAM_KEY_FUSION_ASSOCIATION_KMXCAR,     // weight for longitudinal in medium range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KMYCAR,     // weight for lateral in medium range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KMSPEEDCAR, // weight for speed in medium range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KMTTCCAR,   // weight for TTC in medium range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KMANGLECAR, // weight for angle in medium range for car

    SM_PARAM_KEY_FUSION_ASSOCIATION_KBXCAR,     // weight for longitudinal in big range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KBYCAR,     // weight for lateral in big range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KBSPEEDCAR, // weight for speed in big range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KBTTCCAR,   // weight for TTC in big range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KBANGLECAR, // weight for angle in big range for car

    SM_PARAM_KEY_FUSION_ASSOCIATION_KLXCAR,     // weight for longitudinal in long range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLYCAR,     // weight for lateral in long range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLSPEEDCAR, // weight for speed in long range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLTTCCAR,   // weight for TTC in long range for car
    SM_PARAM_KEY_FUSION_ASSOCIATION_KLANGLECAR, // weight for angle in long range for car


    /*update*/
    SM_PARAM_KEY_FUSION_UPDATE_VALSPEEDHEAD,    // valid speed threshold for heading angle
    SM_PARAM_KEY_FUSION_UPDATE_FASTMOVSPEED,    // speed threshold for fast movable
    SM_PARAM_KEY_FUSION_UPDATE_TYPEBYVISCNTCAR, // minimum vision frame count for keeping classification
    SM_PARAM_KEY_FUSION_UPDATE_TYPEBYVISCNTPED, // minimum vision frame count for keeping classification
    SM_PARAM_KEY_FUSION_UPDATE_DXLIMIT,         // amplitude limit for dlea x
    SM_PARAM_KEY_FUSION_UPDATE_DYLIMIT,         // amplitude limit for dlea y
    SM_PARAM_KEY_FUSION_UPDATE_DVXLIMIT,        // amplitude limit for dlea Vx
    SM_PARAM_KEY_FUSION_UPDATE_DVYLIMIT,        // amplitude limit for dlea Vy

    // gain
    // fusion
    SM_PARAM_KEY_FUSION_UPDATE_FK11, // k11
    SM_PARAM_KEY_FUSION_UPDATE_FK13, // k13
    SM_PARAM_KEY_FUSION_UPDATE_FK22, // k22
    SM_PARAM_KEY_FUSION_UPDATE_FK23, // k24
    SM_PARAM_KEY_FUSION_UPDATE_FK31, // k31
    SM_PARAM_KEY_FUSION_UPDATE_FK33, // k33
    SM_PARAM_KEY_FUSION_UPDATE_FK42, // k42
    SM_PARAM_KEY_FUSION_UPDATE_FK43, // k44
    SM_PARAM_KEY_FUSION_UPDATE_FK51, // k51
    SM_PARAM_KEY_FUSION_UPDATE_FK53, // k53
    SM_PARAM_KEY_FUSION_UPDATE_FK62, // k62
    SM_PARAM_KEY_FUSION_UPDATE_FK63, // k64

    // radar
    SM_PARAM_KEY_FUSION_UPDATE_RK11, // k11
    SM_PARAM_KEY_FUSION_UPDATE_RK13, // k13
    SM_PARAM_KEY_FUSION_UPDATE_RK22, // k22
    SM_PARAM_KEY_FUSION_UPDATE_RK23, // k24
    SM_PARAM_KEY_FUSION_UPDATE_RK31, // k31
    SM_PARAM_KEY_FUSION_UPDATE_RK33, // k33
    SM_PARAM_KEY_FUSION_UPDATE_RK42, // k42
    SM_PARAM_KEY_FUSION_UPDATE_RK43, // k44
    SM_PARAM_KEY_FUSION_UPDATE_RK51, // k51
    SM_PARAM_KEY_FUSION_UPDATE_RK53, // k53
    SM_PARAM_KEY_FUSION_UPDATE_RK62, // k62
    SM_PARAM_KEY_FUSION_UPDATE_RK63, // k64
}PARAM_FusionKey;


typedef enum
{
    SM_PARAM_KEY_CONTRAST_LOSS_LOCAL_FIRST_MAX_GRADE_IDX_TH = 0x24D2E101,
    SM_PARAM_KEY_CONTRAST_LOSS_FIRST_MAX_GRADE_PROPORTION,
    SM_PARAM_KEY_CONTRAST_LOSS_SWITCH,

    SM_PARAM_KEY_DCAL_CHECK_CYCLE = 0x24D2E110,
    SM_PARAM_KEY_DCAL_REACH_UPPER_LIMIT_BIT,
    SM_PARAM_KEY_MISALIGNMENT_YAW_UPPER_TH_DEGREE,
    SM_PARAM_KEY_MISALIGNMENT_PITCH_UPPER_TH_DEGREE,
    SM_PARAM_KEY_MISALIGNMENT_ROLL_UPPER_TH_DEGREE,
    SM_PARAM_KEY_HAGL_DCAL_PITCH_UPPER_LIMIT,
    SM_PARAM_KEY_HAGL_DCAL_YAW_UPPER_LIMIT,
    SM_PARAM_KEY_EOL_CORRECTION_NO_CHANGE_STEP,
    SM_PARAM_KEY_EOL_CORRECTION_STEP_RATIO1,
    SM_PARAM_KEY_EOL_CORRECTION_STEP_RATIO2,
    SM_PARAM_KEY_EOL_CORRECTION_STEP_TH,
    SM_PARAM_KEY_EOL_CORRECTION_NO_LIMIT_TIME,

    SM_PARAM_KEY_CONTRAST_LOSS_MAX_AREA_GRADES_STRETCH_NUM,
    SM_PARAM_KEY_CONTRAST_LOSS_MAX_AREA_GRADES_PROPORTION,
    SM_PARAM_KEY_CONTRAST_LOSS_DOUBLE_PEAK_RATIO_LOW,
    SM_PARAM_KEY_CONTRAST_LOSS_DOUBLE_PEAK_RATIO_HIGH,
    SM_PARAM_KEY_CONTRAST_LOSS_DOUBLE_PEAK_GRADE_DIFF,

    SM_PARAM_KEY_VISION_BD_TRIGGER_DELAY,
    SM_PARAM_KEY_VISION_BD_TRIGGER_SPEED,

    SM_PARAM_KEY_MISALIGNMENT_DET_TOTAL_FRAMES_TH,
    SM_PARAM_KEY_MISALIGNMENT_DET_VALID_FRAMES_TH,
    SM_PARAM_KEY_MISALIGNMENT_DET_PITCH_TH,
    SM_PARAM_KEY_MISALIGNMENT_DET_YAW_TH,
    SM_PARAM_KEY_MISALIGNMENT_STABLE_DRIVING_SPEED_METER_PER_SEC_TH,
    SM_PARAM_KEY_MISALIGNMENT_STABLE_DRIVING_YAWRATE_DEG_PER_SEC_TH,
    SM_PARAM_KEY_DIAGNOSE_RESET_ENABLE,
    SM_PARAM_KEY_08,
    SM_PARAM_KEY_09,
    SM_PARAM_KEY_10,
    SM_PARAM_KEY_MISALIGNMENT_STABLE_DRIVING_ACCELERATION_METER_PER_SEC_SQUARED_TH,
    SM_PARAM_KEY_MISALIGNMENT_DET_VALID_LANE_MARKER_RADII,
    SM_PARAM_KEY_MISALIGNMENT_DET_CONTINUOUS_VALID_FRAMES_TH,
    SM_PARAM_KEY_MISALIGNMENT_DET_CONTINUOUS_PITCH_TH,
    SM_PARAM_KEY_ONLINE_CALIBRATION_VALID_FRAMES_TH,
    SM_PARAM_KEY_ONLINE_CALIBRATION_DIVERGING_FACTOR_TH,
    SM_PARAM_KEY_ONLINE_CALIBRATION_PITCH_CORRECTION_DEGREE_STEP,
    SM_PARAM_KEY_ONLINE_CALIBRATION_YAW_DIFF_DEGREE_TH,
    SM_PARAM_KEY_ONLINE_CALIBRATION_YAW_CORRECTION_DEGREE_STEP,
    SM_PARAM_KEY_ONLINE_CALIBRATION_INITIAL_STAGE_FRAME_CNT,
    SM_PARAM_KEY_ONLINE_CALIBRATION_MIDDLE_STAGE_FRAME_CNT,
    SM_PARAM_KEY_ONLINE_CALIBRATION_LANE_FAR_END_DISTANCE,
    SM_PARAM_KEY_EOL_CORRECTION_HAGL_YAW_NOT_WORKING_TH,
    SM_PARAM_KEY_EOL_CORRECTION_LARGE_YAW_DIFF_COEFFICIENT,
    SM_PARAM_KEY_LANE_C2_PARAMETERS,
    SM_PARAM_KEY_26,
    SM_PARAM_KEY_27,
    SM_PARAM_KEY_28,
    SM_PARAM_KEY_29,
    SM_PARAM_KEY_30,
    SM_PARAM_KEY_31,
    SM_PARAM_KEY_32,
    SM_PARAM_KEY_33,
    SM_PARAM_KEY_34,
    SM_PARAM_KEY_35,
    SM_PARAM_KEY_36,
    SM_PARAM_KEY_37,
    SM_PARAM_KEY_38,
    SM_PARAM_KEY_39,
    SM_PARAM_KEY_40,
    SM_PARAM_KEY_41,
    SM_PARAM_KEY_42,
}PARAM_PerceptionKey;


/************************** Inline Function Definition ************************/
static uint32 PARAM_initFusionParameter(PARAM_Unit* pDataMem, uint32 maxSize)
{
    uint32 idx = 0;

    if (NULL == pDataMem)
    {
        return 0;
    }
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_FUSIONGLOB_OBSROBTHRES,     SM_PARAM_TYPE_FLOAT32, f32Value, 18.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_FUSIONGLOB_VISCONFITHRES,   SM_PARAM_TYPE_FLOAT32, f32Value, 80.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_BZCOAST,         SM_PARAM_TYPE_FLOAT32, f32Value, 1.20f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_BZAREA,          SM_PARAM_TYPE_FLOAT32, f32Value, 10.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_YRTHRES,         SM_PARAM_TYPE_FLOAT32, f32Value, 0.08f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTXSMALLTHRES,  SM_PARAM_TYPE_FLOAT32, f32Value, 0.50f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTXMEDTHRES,    SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTXBIGTHRES,    SM_PARAM_TYPE_FLOAT32, f32Value, 1.50f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTYSMALLTHRES,  SM_PARAM_TYPE_FLOAT32, f32Value, 0.50f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTYMEDTHRES,    SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTYBIGTHRES,    SM_PARAM_TYPE_FLOAT32, f32Value, 1.50f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTSPEEDSMALLTHRES,   SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTSPEEDMEDTHRES,     SM_PARAM_TYPE_FLOAT32, f32Value, 2.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTSPEEDBIGTHRES,     SM_PARAM_TYPE_FLOAT32, f32Value, 3.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTHEADINGSMALLTHRES, SM_PARAM_TYPE_FLOAT32, f32Value, 0.034f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTHEADINGMEDTHRES,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.060f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTHEADINGBIGTHRES,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.080f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTACCSMALLTHRES, SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTACCMEDTHRES,   SM_PARAM_TYPE_FLOAT32, f32Value, 2.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_DLTACCBIGTHRES,   SM_PARAM_TYPE_FLOAT32, f32Value, 3.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_CONFIDENCE_VISONLYPEDFCW,    SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_NIGHTCOEFF,      SM_PARAM_TYPE_FLOAT32, f32Value, 0.90f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_SCORETHRES,      SM_PARAM_TYPE_FLOAT32, f32Value, 0.80f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_VISSYSXERR,      SM_PARAM_TYPE_FLOAT32, f32Value, 5.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KPRESCORE,       SM_PARAM_TYPE_FLOAT32, f32Value, 0.80f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KOBSPROB,        SM_PARAM_TYPE_FLOAT32, f32Value, 1.05f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KCLASSIFICATION, SM_PARAM_TYPE_FLOAT32, f32Value, 1.83f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_XLOGTHRESPED, SM_PARAM_TYPE_FLOAT32, f32Value, 20.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSXPED,       SM_PARAM_TYPE_FLOAT32, f32Value, 0.15f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSYPED,       SM_PARAM_TYPE_FLOAT32, f32Value, 0.50f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSSPEEDPED,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.10f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSTTCPED,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSANGLEPED,   SM_PARAM_TYPE_FLOAT32, f32Value, 15.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLXPED,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.08f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLYPED,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.30f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLSPEEDPED, SM_PARAM_TYPE_FLOAT32, f32Value, 0.10f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLTTCPED,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_XSLOGTHRESCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 10.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_XMLOGTHRESCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 30.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_XBLOGTHRESCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 50.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSXCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSYCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSSPEEDCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 0.20f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSTTCCAR,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KSANGLECAR, SM_PARAM_TYPE_FLOAT32, f32Value, 15.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KMXCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.10f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KMYCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KMSPEEDCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 0.20f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KMTTCCAR,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KMANGLECAR, SM_PARAM_TYPE_FLOAT32, f32Value, 50.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KBXCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.10f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KBYCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KBSPEEDCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 0.20f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KBTTCCAR,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KBANGLECAR, SM_PARAM_TYPE_FLOAT32, f32Value, 50.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLXCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.10f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLYCAR,     SM_PARAM_TYPE_FLOAT32, f32Value, 0.30f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLSPEEDCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 0.22f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLTTCCAR,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_ASSOCIATION_KLANGLECAR, SM_PARAM_TYPE_FLOAT32, f32Value, 100.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_VALSPEEDHEAD,    SM_PARAM_TYPE_FLOAT32, f32Value, 2.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FASTMOVSPEED,    SM_PARAM_TYPE_FLOAT32, f32Value, 7.50f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_TYPEBYVISCNTCAR, SM_PARAM_TYPE_FLOAT32, f32Value, 15.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_TYPEBYVISCNTPED, SM_PARAM_TYPE_FLOAT32, f32Value, 4.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_DXLIMIT,         SM_PARAM_TYPE_FLOAT32, f32Value, 2.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_DYLIMIT,         SM_PARAM_TYPE_FLOAT32, f32Value, 2.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_DVXLIMIT,        SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_DVYLIMIT,        SM_PARAM_TYPE_FLOAT32, f32Value, 1.00f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK11, SM_PARAM_TYPE_FLOAT32, f32Value, 0.14654f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK13, SM_PARAM_TYPE_FLOAT32, f32Value, 0.035f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK22, SM_PARAM_TYPE_FLOAT32, f32Value, 0.176f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK23, SM_PARAM_TYPE_FLOAT32, f32Value, 0.016f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK31, SM_PARAM_TYPE_FLOAT32, f32Value, 0.05f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK33, SM_PARAM_TYPE_FLOAT32, f32Value, 0.38f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK42, SM_PARAM_TYPE_FLOAT32, f32Value, 0.18f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK43, SM_PARAM_TYPE_FLOAT32, f32Value, 0.25f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK51, SM_PARAM_TYPE_FLOAT32, f32Value, 0.05f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK53, SM_PARAM_TYPE_FLOAT32, f32Value, 2.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK62, SM_PARAM_TYPE_FLOAT32, f32Value, 0.015f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_FK63, SM_PARAM_TYPE_FLOAT32, f32Value, 0.11f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK11, SM_PARAM_TYPE_FLOAT32, f32Value, 0.1854f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK13, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0385f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK22, SM_PARAM_TYPE_FLOAT32, f32Value, 0.18f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK23, SM_PARAM_TYPE_FLOAT32, f32Value, 0.035f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK31, SM_PARAM_TYPE_FLOAT32, f32Value, 0.08f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK33, SM_PARAM_TYPE_FLOAT32, f32Value, 0.433f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK42, SM_PARAM_TYPE_FLOAT32, f32Value, 0.08f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK43, SM_PARAM_TYPE_FLOAT32, f32Value, 0.25f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK51, SM_PARAM_TYPE_FLOAT32, f32Value, 0.06f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK53, SM_PARAM_TYPE_FLOAT32, f32Value, 2.20f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK62, SM_PARAM_TYPE_FLOAT32, f32Value, 0.05f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_FUSION_UPDATE_RK63, SM_PARAM_TYPE_FLOAT32, f32Value, 0.40f);

    return idx;
}


static uint32 PARAM_initSendorParameter(PARAM_Unit* pDataMem, uint32 maxSize)
{
    uint32 idx = 0;

    if (NULL == pDataMem)
    {
        return 0;
    }

    #define PI 3.14159265358979323846
    #define TORADIAN(D) (D * PI / 180.0)
    #define TODEGREE(R) (R * 180.0 / PI)

    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_LOCAL_FIRST_MAX_GRADE_IDX_TH, SM_PARAM_TYPE_UINT32,  u32Value, 150);
    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_FIRST_MAX_GRADE_PROPORTION,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.2f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_SWITCH,                       SM_PARAM_TYPE_UINT32,  u32Value, 1);

    SM_PARAM_API_INIT(SM_PARAM_KEY_VISION_BD_TRIGGER_DELAY, SM_PARAM_TYPE_UINT32,  u32Value, 660);
    SM_PARAM_API_INIT(SM_PARAM_KEY_VISION_BD_TRIGGER_SPEED, SM_PARAM_TYPE_FLOAT32, f32Value, 0.972f);

    SM_PARAM_API_INIT(SM_PARAM_KEY_DCAL_CHECK_CYCLE,                   SM_PARAM_TYPE_UINT32,  u32Value, 22*60);
    SM_PARAM_API_INIT(SM_PARAM_KEY_DCAL_REACH_UPPER_LIMIT_BIT,         SM_PARAM_TYPE_UINT32,  u32Value, 3);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_YAW_UPPER_TH_DEGREE,   SM_PARAM_TYPE_FLOAT32, f32Value, 3.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_PITCH_UPPER_TH_DEGREE, SM_PARAM_TYPE_FLOAT32, f32Value, 3.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_ROLL_UPPER_TH_DEGREE,  SM_PARAM_TYPE_FLOAT32, f32Value, 2.5f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_HAGL_DCAL_PITCH_UPPER_LIMIT,        SM_PARAM_TYPE_FLOAT32, f32Value, 2.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_HAGL_DCAL_YAW_UPPER_LIMIT,          SM_PARAM_TYPE_FLOAT32, f32Value, 1.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_NO_CHANGE_STEP,      SM_PARAM_TYPE_FLOAT32, f32Value, 0.02f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_STEP_RATIO1,         SM_PARAM_TYPE_FLOAT32, f32Value, 1.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_STEP_RATIO2,         SM_PARAM_TYPE_FLOAT32, f32Value, 0.5f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_STEP_TH,             SM_PARAM_TYPE_FLOAT32, f32Value, 0.5f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_NO_LIMIT_TIME,       SM_PARAM_TYPE_UINT32,  u32Value, 0);

    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_MAX_AREA_GRADES_STRETCH_NUM, SM_PARAM_TYPE_UINT32,  u32Value, 50);
    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_MAX_AREA_GRADES_PROPORTION,  SM_PARAM_TYPE_FLOAT32, f32Value, 0.95f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_DOUBLE_PEAK_RATIO_LOW,       SM_PARAM_TYPE_FLOAT32, f32Value, 30.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_DOUBLE_PEAK_RATIO_HIGH,      SM_PARAM_TYPE_FLOAT32, f32Value, 1500.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_CONTRAST_LOSS_DOUBLE_PEAK_GRADE_DIFF,      SM_PARAM_TYPE_UINT32,  u32Value, 10);

    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_TOTAL_FRAMES_TH,            SM_PARAM_TYPE_UINT32,  u32Value, 1320*10);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_VALID_FRAMES_TH,            SM_PARAM_TYPE_UINT32,  u32Value, 1320*2);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_CONTINUOUS_VALID_FRAMES_TH, SM_PARAM_TYPE_UINT32,  u32Value, 1320);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_VALID_FRAMES_TH,          SM_PARAM_TYPE_UINT32,  u32Value, 1320*10);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_INITIAL_STAGE_FRAME_CNT,  SM_PARAM_TYPE_UINT32,  u32Value, 1320*3);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_MIDDLE_STAGE_FRAME_CNT,   SM_PARAM_TYPE_UINT32,  u32Value, 1320*8);
    SM_PARAM_API_INIT(SM_PARAM_KEY_DIAGNOSE_RESET_ENABLE,                       SM_PARAM_TYPE_UINT32,  u32Value, 1);
    SM_PARAM_API_INIT(SM_PARAM_KEY_08, SM_PARAM_TYPE_UINT32,  u32Value, 1);
    SM_PARAM_API_INIT(SM_PARAM_KEY_09, SM_PARAM_TYPE_UINT32,  u32Value, 1);
    SM_PARAM_API_INIT(SM_PARAM_KEY_10, SM_PARAM_TYPE_UINT32,  u32Value, 1);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_PITCH_TH,                          SM_PARAM_TYPE_FLOAT32, f32Value, 0.056f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_YAW_TH,                            SM_PARAM_TYPE_FLOAT32, f32Value, 0.025f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_STABLE_DRIVING_SPEED_METER_PER_SEC_TH, SM_PARAM_TYPE_FLOAT32, f32Value, 40.0/3.6);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_STABLE_DRIVING_YAWRATE_DEG_PER_SEC_TH, SM_PARAM_TYPE_FLOAT32, f32Value, TORADIAN(0.8));
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_STABLE_DRIVING_ACCELERATION_METER_PER_SEC_SQUARED_TH, SM_PARAM_TYPE_FLOAT32, f32Value, 2.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_VALID_LANE_MARKER_RADII,        SM_PARAM_TYPE_FLOAT32, f32Value, 2500.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_MISALIGNMENT_DET_CONTINUOUS_PITCH_TH,            SM_PARAM_TYPE_FLOAT32, f32Value, 0.058f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_DIVERGING_FACTOR_TH,          SM_PARAM_TYPE_FLOAT32, f32Value, 0.1f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_PITCH_CORRECTION_DEGREE_STEP, SM_PARAM_TYPE_FLOAT32, f32Value, 0.1f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_YAW_DIFF_DEGREE_TH,           SM_PARAM_TYPE_FLOAT32, f32Value, 0.5f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_YAW_CORRECTION_DEGREE_STEP,   SM_PARAM_TYPE_FLOAT32, f32Value, 0.1f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_ONLINE_CALIBRATION_LANE_FAR_END_DISTANCE,        SM_PARAM_TYPE_FLOAT32, f32Value, 40.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_HAGL_YAW_NOT_WORKING_TH,          SM_PARAM_TYPE_FLOAT32, f32Value, 0.15f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_EOL_CORRECTION_LARGE_YAW_DIFF_COEFFICIENT,       SM_PARAM_TYPE_FLOAT32, f32Value, 0.85f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_LANE_C2_PARAMETERS,                              SM_PARAM_TYPE_FLOAT32, f32Value, 0.00025f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_26, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_27, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_28, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_29, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_30, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_31, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_32, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_33, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_34, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_35, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_36, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_37, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_38, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_39, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_40, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_41, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);
    SM_PARAM_API_INIT(SM_PARAM_KEY_42, SM_PARAM_TYPE_FLOAT32, f32Value, 0.0f);

    return idx;
}

/************************** External Variable Decleration  ********************/


/************************** External Function Decleration *********************/
/*******************************************************************************
 * @name        PARAM_isKeyValid
 * @brief       judged whether key is valid or not
 * @param[in]   key:parameter key
 * @param[out]  none
 * @return      0 means success, non-zero failure
 * @see         none
 * @note        none
 ******************************************************************************/
sint32 PARAM_isKeyValid(uint32 key);


/*******************************************************************************
 * @name        PARAM_getValueByKeyAndType
 * @brief       get the algorithm parameter by key and type
 * @param[in]   pParamUnit: contain key and type
 * @param[out]  pParamUnit: contain value
 * @return      0 means success, non-zero failure
 * @see         none
 * @note        none
 ******************************************************************************/
sint32 PARAM_getValueByKeyAndType(PARAM_Unit *pParamUnit);


#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* _P_PARAM_API_H_ */
